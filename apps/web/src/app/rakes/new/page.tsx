"use client";
import { useEffect, useMemo, useState } from "react";
import { withBase } from "@/lib/config";

type Step = 1 | 2 | 3 | 4;

export default function NewRakeWizardPage() {
  const [step, setStep] = useState<Step>(1);
  const [yards, setYards] = useState<any[]>([]);
  const [routeOptions, setRouteOptions] = useState<Array<{ key: string; name: string }>>([
    { key: 'BKSC-DGR', name: 'BKSC → DGR' },
    { key: 'BKSC-ROU', name: 'BKSC → ROU' },
    { key: 'BKSC-BPHB', name: 'BKSC → BPHB' },
  ]);

  // Form data
  const [name, setName] = useState("");
  const [routeKey, setRouteKey] = useState<string>("BKSC-DGR");
  const [destinationYard, setDestinationYard] = useState("");
  const [cargoType, setCargoType] = useState("TMT Bars");
  const [grade, setGrade] = useState("Fe500");
  const [tonnage, setTonnage] = useState(3000);
  const [wagons, setWagons] = useState(20);
  const [locomotive, setLocomotive] = useState("electric");
  const [rfid, setRfid] = useState<string>("");
  const [busy, setBusy] = useState(false);
  const [created, setCreated] = useState<any>(null);
  const [dispatchedBlock, setDispatchedBlock] = useState<any>(null);

  useEffect(() => {
    const token = localStorage.getItem('token')||'';
    fetch(withBase('/yards'), { headers: { Authorization: `Bearer ${token}` } })
      .then(r=>r.json()).then((ys)=> setYards(Array.isArray(ys)? ys: [])).catch(()=> setYards([]));
    fetch(withBase('/routes'), { headers: { Authorization: `Bearer ${token}` } })
      .then(r=>r.json()).then((list)=>{ if (Array.isArray(list) && list.length) setRouteOptions(list); }).catch(()=>{});
  }, []);

  const carbonEstimate = useMemo(() => {
    const base = cargoType.toLowerCase().includes('coil')? 0.02 : cargoType.toLowerCase().includes('h-beam')? 0.021 : 0.02;
    const locoMul = locomotive === 'electric' ? 0.6 : locomotive === 'hybrid' ? 0.8 : 1.0;
    return Number(((tonnage) * base * locoMul / 100).toFixed(2));
  }, [cargoType, locomotive, tonnage]);

  async function createRake() {
    setBusy(true);
    try {
      const token = localStorage.getItem('token') || '';
      const body = { name, destinationYard, cargoType, grade, tonnage, wagons, locomotive, id: name?.trim() || undefined, routeKey };
      const r = await fetch(withBase('/rakes'), { method: 'POST', headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` }, body: JSON.stringify(body) });
      const d = await r.json();
      if (!r.ok) throw new Error(d.error || 'Failed');
      setCreated(d);
      if (d.rfid) setRfid(d.rfid);
      setStep(4);
    } catch (e:any) {
      alert(e.message);
    } finally {
      setBusy(false);
    }
  }

  async function dispatchRake() {
    if (!created?.rake?.id) return;
    setBusy(true);
    try {
      const token = localStorage.getItem('token') || '';
      const body = { rakeId: created.rake.id, from: 'Bokaro', to: destinationYard || 'Unknown', cargo: cargoType, tonnage };
      const r = await fetch(withBase('/ledger/dispatch'), { method: 'POST', headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` }, body: JSON.stringify(body) });
      const d = await r.json();
      if (!r.ok) throw new Error(d.error || 'Failed');
      setDispatchedBlock(d);
    } catch (e:any) {
      alert(e.message);
    } finally {
      setBusy(false);
    }
  }

  return (
    <main className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-semibold">Create Rake</h2>
  <a href="/dashboard" className="text-sm underline">Back to Dashboard</a>
      </div>

      {/* Steps header */}
      <div className="flex items-center gap-2 text-xs">
        {['1. Route & Destination','2. Cargo & Specs','3. Wagons & Loco','4. Review & Create'].map((t, i)=> (
          <div key={t} className={`px-2 py-1 rounded border ${step===i+1? 'bg-brand-green text-black border-brand-green': 'border-white/10 text-gray-300'}`}>{t}</div>
        ))}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="md:col-span-2 rounded-xl bg-white/5 p-4 border border-white/10 space-y-3">
          {step === 1 && (
            <>
              <div>
                <label className="block text-xs text-gray-400 mb-1">Rake Name / ID</label>
                <input value={name} onChange={e=>setName(e.target.value)} placeholder="Autogenerated if empty" className="w-full bg-black/40 border border-white/10 rounded-md px-3 py-2" />
              </div>
              <div>
                <label className="block text-xs text-gray-400 mb-1">Route</label>
                <select value={routeKey} onChange={e=>setRouteKey(e.target.value)} className="w-full bg-black/40 border border-white/10 rounded-md px-3 py-2">
                  {routeOptions.map(o=> (<option key={o.key} value={o.key}>{o.name}</option>))}
                </select>
              </div>
              <div>
                <label className="block text-xs text-gray-400 mb-1">Destination Yard</label>
                <select value={destinationYard} onChange={e=>setDestinationYard(e.target.value)} className="w-full bg-black/40 border border-white/10 rounded-md px-3 py-2">
                  <option value="">Select yard…</option>
                  {yards.map((y:any)=> (<option key={y.code||y.name} value={y.code||y.name}>{y.name || y.code}</option>))}
                </select>
              </div>
              <div className="flex justify-end">
                <button disabled={!destinationYard} onClick={()=>setStep(2)} className="rounded-md bg-brand-green text-black px-4 py-2">Continue →</button>
              </div>
            </>
          )}

          {step === 2 && (
            <>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                <div>
                  <label className="block text-xs text-gray-400 mb-1">Cargo Type</label>
                  <select value={cargoType} onChange={e=>setCargoType(e.target.value)} className="w-full bg-black/40 border border-white/10 rounded-md px-3 py-2">
                    <option>TMT Bars</option>
                    <option>Coils</option>
                    <option>H-Beams</option>
                    <option>Ore</option>
                    <option>Coal</option>
                    <option>Steel</option>
                    <option>Cement</option>
                  </select>
                </div>
                <div>
                  <label className="block text-xs text-gray-400 mb-1">Steel Grade</label>
                  <select value={grade} onChange={e=>setGrade(e.target.value)} className="w-full bg-black/40 border border-white/10 rounded-md px-3 py-2">
                    <option>Fe500</option>
                    <option>Fe550</option>
                    <option>Fe600</option>
                  </select>
                </div>
              </div>
              <div className="flex justify-between">
                <button onClick={()=>setStep(1)} className="rounded-md border border-white/10 px-4 py-2">← Back</button>
                <button onClick={()=>setStep(3)} className="rounded-md bg-brand-green text-black px-4 py-2">Continue →</button>
              </div>
            </>
          )}

          {step === 3 && (
            <>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                <div>
                  <label className="block text-xs text-gray-400 mb-1">Tonnage (t)</label>
                  <input type="number" min={100} max={6000} step={50} value={tonnage} onChange={e=>setTonnage(Number(e.target.value))} className="w-full bg-black/40 border border-white/10 rounded-md px-3 py-2" />
                </div>
                <div>
                  <label className="block text-xs text-gray-400 mb-1">Number of Wagons</label>
                  <input type="number" min={1} max={100} step={1} value={wagons} onChange={e=>setWagons(Number(e.target.value))} className="w-full bg-black/40 border border-white/10 rounded-md px-3 py-2" />
                </div>
                <div>
                  <label className="block text-xs text-gray-400 mb-1">Locomotive</label>
                  <select value={locomotive} onChange={e=>setLocomotive(e.target.value)} className="w-full bg-black/40 border border-white/10 rounded-md px-3 py-2">
                    <option value="electric">Electric</option>
                    <option value="diesel">Diesel</option>
                    <option value="hybrid">Hybrid</option>
                  </select>
                </div>
              </div>
              <div className="flex justify-between">
                <button onClick={()=>setStep(2)} className="rounded-md border border-white/10 px-4 py-2">← Back</button>
                <button onClick={()=>setStep(4)} className="rounded-md bg-brand-green text-black px-4 py-2">Review →</button>
              </div>
            </>
          )}

          {step === 4 && (
            <>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                <div>
                  <label className="block text-xs text-gray-400 mb-1">Rake Name / ID</label>
                  <input value={name} onChange={e=>setName(e.target.value)} placeholder="Autogenerated if empty" className="w-full bg-black/40 border border-white/10 rounded-md px-3 py-2" />
                </div>
                <div>
                  <label className="block text-xs text-gray-400 mb-1">Route</label>
                  <select value={routeKey} onChange={e=>setRouteKey(e.target.value)} className="w-full bg-black/40 border border-white/10 rounded-md px-3 py-2">
                    {routeOptions.map(o=> (<option key={o.key} value={o.key}>{o.name}</option>))}
                  </select>
                </div>
                <div>
                  <label className="block text-xs text-gray-400 mb-1">Destination Yard</label>
                  <input value={destinationYard} onChange={e=>setDestinationYard(e.target.value)} className="w-full bg-black/40 border border-white/10 rounded-md px-3 py-2" />
                </div>
                <div>
                  <label className="block text-xs text-gray-400 mb-1">RFID (auto)</label>
                  <input value={rfid || '(auto)'} disabled className="w-full bg-black/20 border border-white/10 rounded-md px-3 py-2" />
                </div>
              </div>
              {!created && (
                <div className="flex justify-between mt-3">
                  <button onClick={()=>setStep(3)} className="rounded-md border border-white/10 px-4 py-2">← Back</button>
                  <button disabled={!destinationYard || busy} onClick={createRake} className="rounded-md bg-brand-green text-black px-4 py-2">{busy? 'Creating…':'Create Rake'}</button>
                </div>
              )}
              {created && (
                <div className="mt-4 p-3 bg-green-500/10 border border-green-500/30 rounded">
                  <div className="text-sm">Created rake {created.rake?.id} with RFID {created.rfid}</div>
                  <div className="flex gap-3 text-xs mt-1">
                    <a href="/dashboard" className="underline">Go to Dashboard</a>
                    <a href={`/rakes/${created.rake?.id}`} className="underline">Open Rake Detail</a>
                    <button onClick={dispatchRake} className="underline">Dispatch Now</button>
                  </div>
                  {dispatchedBlock && (
                    <div className="text-xs mt-2">Dispatched block hash: {dispatchedBlock.hash?.slice?.(0,10)}…</div>
                  )}
                </div>
              )}
            </>
          )}
        </div>

        <div className="rounded-xl bg-white/5 p-4 border border-white/10">
          <h3 className="mb-2">Preview</h3>
          <ul className="text-sm text-gray-300 space-y-1">
            <li>Name: {name || '(auto)'}</li>
            <li>Route: {routeKey}</li>
            <li>Destination: {destinationYard || '—'}</li>
            <li>Cargo: {cargoType} ({grade})</li>
            <li>Wagons: {wagons}</li>
            <li>Tonnage: {tonnage} t</li>
            <li>Locomotive: {locomotive}</li>
            <li>Carbon estimate: ~{carbonEstimate} tCO₂</li>
            <li>RFID: {rfid || '(on create)'}</li>
          </ul>
        </div>
      </div>
    </main>
  );
}
